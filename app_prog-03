EXECUTED DATE:30/08/2023
Takes the number of nodes in the social network as input.
Takes the adjacency matrix as input.
Initializes an array visited to keep track of visited nodes.
For each unvisited node, it calls the dfs function to perform a depth-first search traversal and print out the nodes in the connected component.
The dfs function itself recursively traverses the network, marking nodes as visited and printing their values.
#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

// Function to perform Depth-First Search
void dfs(int node, int n, bool visited[], int adjacencyMatrix[][MAX_NODES]) {
    visited[node] = true;
    printf("%d ", node);

    for (int i = 0; i < n; i++) {
        if (adjacencyMatrix[node][i] && !visited[i]) {
            dfs(i, n, visited, adjacencyMatrix);
        }
    }
}

// Function to find connected components using DFS
void findConnectedComponents(int n, int adjacencyMatrix[][MAX_NODES]) {
    bool visited[MAX_NODES] = {false};

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            printf("Connected Component: ");
            dfs(i, n, visited, adjacencyMatrix);
            printf("\n");
        }
    }
}

int main() {
    int n; // Number of nodes in the graph
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    int adjacencyMatrix[MAX_NODES][MAX_NODES];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }

    printf("Connected Components:\n");
    findConnectedComponents(n, adjacencyMatrix);

    return 0;
}
/......................................................
#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

// Function to perform Depth-First Search
void DFS(int node, int n, bool visited[], int adjacencyMatrix[][MAX_NODES]) {
    printf("%d ", node);
    visited[node] = true;

    for (int i = 0; i < n; i++) {
        if (adjacencyMatrix[node][i] == 1 && !visited[i]) {
            DFS(i, n, visited, adjacencyMatrix);
        }
    }
}

// Function to find connected components
void findConnectedComponents(int n, int adjacencyMatrix[][MAX_NODES]) {
    bool visited[MAX_NODES] = {false};

    printf("Connected Components:\n");
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            DFS(i, n, visited, adjacencyMatrix);
            printf("\n");
        }
    }
}

int main() {
    int n;
    printf("Enter the number of nodes in the social network: ");
    scanf("%d", &n);

    int adjacencyMatrix[MAX_NODES][MAX_NODES];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }

    findConnectedComponents(n, adjacencyMatrix);

    return 0;
}
